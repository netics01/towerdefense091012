using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Collections.ObjectModel;

namespace PlanetTerror.Util
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Constant
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public static class Constant
	{
		public const float ROOT_2 = 1.41421356237f;
		//public const double ROOT_2 = 1.4142135623730950488016887242097;
		public const float HALF_ROOT_2 = ROOT_2 / 2;
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public const float E = 2.71828f;
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public const float PI = 3.141592f;
		public const float HALF_PI = PI * 0.5f;
		public const float SINE_45DEGREE = HALF_ROOT_2;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	EaseFunction
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	[0, 1] 구간의 x 에 대한 ease-in, ease-out 함수
	public static class EaseFunction
	{
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	시작/종료시 ease-in : 3x^2 - 2x^3
		public static float EaseInPoly(float x)
		{
			float squared = x * x;
			return 3.0f * squared - 2.0f * squared * x;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	시작/종료시 ease-in : (1 - sin(x * PI + PI/2) / 2
		public static float EaseInSin(float x)
		{
			return (1.0f - (float)Math.Sin( (x + 0.5f) * Constant.PI )) * 0.5f;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	c > 1		: ease-out -> ease-in
		//	0 < c < 1	: ease-in -> ease-out
		public static float EaseInOut(float x, float c)
		{
			float cx = x * c;
			return cx / (cx - x + 1.0f);
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	Lerp.
		//	Vector 형 lerp 는 있는데 float 형 lerp 는 없어서 제작
		public static float Lerp(float a, float b, float t)
		{
			return a + (b - a) * t;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	0 -> -extAmount -> +extAmout -> 1 로 변화한다. extAmount 로 변화하는 구간에는 extInterval(< 0.5) 이 소요된다.
		//	각 구간은 EaseInSine() 으로 보간된다.
		public static double EaseInSinEx(float x, float extAmount, float extInterval)
		{
			Debug.Assert(extInterval < 0.5f);
			if( x < extInterval )
			{
				return -EaseInSin(x / extInterval) * extAmount;
			}
			else if( x < 1.0f - extInterval )
			{
				return EaseInSin((x - extInterval) / (1.0f - extInterval * 2)) * (1 + 2 * extAmount) - extAmount;
			}
			else
			{
				return 1 + EaseInSin((1 - x) / extInterval) * extAmount;
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	반감기를 사용한 보간
		public static float HalflifeInterpolate(float a, float b, float t)
		{
			Debug.Assert(a * b > 0);
			//double lambda = -Math.Log(b/a);
			//return a * Math.Exp(-lambda * t);
			return a * (float)Math.Exp(Math.Log(b/a) * t);
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	EaseVar
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	EaseFunction.EaseInPoly 를 사용하는 변수
	public struct EaseVar
	{
		//===============================================================================================================================================
		//	프로퍼티
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	변환된 값
		public float Value
		{
			get
			{
				return EaseFunction.EaseInPoly(RawValue);
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	원래 값
		public float RawValue
		{
			get { return rawValue; }
			set
			{
				rawValue = NumberH.Clamp(0.0f, value, 1.0f);
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	0 인가?
		public bool IsZero
		{
			get { return RawValue == 0.0f; }
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	1 인가?
		public bool IsOne
		{
			get { return RawValue == 1.0f; }
		}

		//===============================================================================================================================================
		//	필드
		float rawValue;

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public EaseVar(float value)
		{
			rawValue = NumberH.Clamp(0.0f, value, 1.0f);
		}

		//===============================================================================================================================================
		//	캐스팅
		public static implicit operator float(EaseVar var)
		{
			return var.Value;
		}
		//===============================================================================================================================================
		//	Object 오버라이드
		public override string ToString()
		{
			return Value.ToString();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Timer
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	DateTime 클래스에 기반한 타이머
	public class Timer
	{
		//===============================================================================================================================================
		//	필드
		DateTime baseTime;
		DateTime lastTime;

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public Timer()
		{
			baseTime = DateTime.Now;
			lastTime = baseTime;
		}

		//===============================================================================================================================================
		//	공용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	이 함수를 마지막으로 호출했던 때로부터 경과된 시간을 초 단위로 얻는다. 
		public float GetElapsed()
		{
			var currentTime = DateTime.Now;
			var diffTime = currentTime - lastTime;
			lastTime = currentTime;
			return (float)diffTime.TotalSeconds;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	타이머가 생성된 때로부터 경과된 시간을 초 단위로 얻는다.
		public float GetAccumulated()
		{
			var diffTime = DateTime.Now - baseTime;
			return (float)diffTime.TotalSeconds;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	RefreshTimer
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Period 가 될때마다 Refresh() 에서 true 를 리턴한다.
// 	public class RefreshTimer
// 	{
// 		//===============================================================================================================================================
// 		//	프로퍼티
// 		public float Period { get; set; }
// 		public float CurTime { get; set; }
// 
// 		//-----------------------------------------------------------------------------------------------------------------------------------------------
// 		//	생성자
// 		public RefreshTimer(float period) : this(period, false) { }
// 		//-----------------------------------------------------------------------------------------------------------------------------------------------
// 		public RefreshTimer(float period, bool bRandomStart)
// 		{
// 			Period = period;
// 			CurTime = bRandomStart ? (float)(RandomH.Random.NextDouble() * period) : 0;
// 		}
// 
// 		//-----------------------------------------------------------------------------------------------------------------------------------------------
// 		//	리프레쉬 주기가 되었으면 true 리턴
// 		public bool Refresh(float delta)
// 		{
// 			CurTime += delta;
// 			if( CurTime >= Period )
// 			{
// 				CurTime -= Period;
// 				return true;
// 			}
// 			return false;
// 		}
// 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	List2D
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public class List2D<T> : List<T> where T : new()
	{
		//===============================================================================================================================================
		//	프로퍼티
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public int Width
		{
			get { return width; }
			set { SetSize(value, height); }
		}
		int width = 0;
		public int Height
		{
			get { return height; }
			set { SetSize(width, value); }
		}
		int height = 0;
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public PointI Size { get { return new PointI(width, height); } }

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public List2D() : base() {}
		public List2D(int capacity) : base(capacity) { }
		public List2D(IEnumerable<T> collection) : base(collection) { }
		public List2D(int w, int h) : base(w * h) { SetSize(w, h); }
		public List2D(PointI size) : base(size.x * size.y) { SetSize(size.x, size.y); }
		public List2D(List2D<T> rhs) : base(rhs) { width = rhs.width; height = rhs.height; }

		//===============================================================================================================================================
		//	공용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	사이즈 설정. 주의! 내용물이 모두 사라진다.
		public void SetSize(int w, int h)
		{
			if( width == w && height == h ) { return; }

			width = w;
			height = h;
			Clear();
			for( int i = 0; i < w * h; ++i )
			{
				Add(new T());
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public void SetSize(PointI size) { SetSize(size.x, size.y); }
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	초기화
		public void Fill(T t)
		{
			for( int i = 0; i < Count; ++i ) { this[i] = t; }
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	인덱스로 변환
		public int ToIndex(int x, int y) { return y * Width + x; }
		public int ToIndex(PointI p) { return p.y * Width + p.x; }
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	2차원으로 순회
		public delegate void Enumerate2D(int x, int y);
		public void ForEach2D(Enumerate2D enumerator2D)
		{
			for( int y = 0; y < Height; ++y )
			{
				for( int x = 0; x < Width; ++x )
				{
					enumerator2D(x, y);
				}
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	2D 액세스
		public T this[int x, int y]
		{
			get { return base[y * width + x]; }
			set { base[y * width + x] = value; }
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public T this[PointI pos]
		{
			get { return base[pos.y * width + pos.x]; }
			set { base[pos.y * width + pos.x] = value; }
		}
	}
}
