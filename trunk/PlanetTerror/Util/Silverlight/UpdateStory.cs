using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;


namespace PlanetTerror.Util
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	UpdateStory
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public class UpdateStory
	{
		//===============================================================================================================================================
		//	프로퍼티
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public double UpdatePeriod
		{
			get { return updatePeriod; }
			set { updatePeriod = value; story.Duration = GetUpdateDuration(); }
		}
		const double UPDATE_PERIOD = 1 / 30.0;
		double updatePeriod;

		//===============================================================================================================================================
		//	이벤트
		public delegate void UpdateHandler(float delta);
		public event UpdateHandler Update;

		//===============================================================================================================================================
		//	필드
		Timer timer;
		Storyboard story;
		bool bRun;

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public UpdateStory() : this(UPDATE_PERIOD) { }
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public UpdateStory(double period)
		{
			updatePeriod = period;

			timer = new Timer();
			story = new Storyboard();
			story.Duration = GetUpdateDuration();
			story.Completed += new EventHandler(story_Completed);
		}

		//===============================================================================================================================================
		//	공용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	업데이트 루프 시작
		public void Begin()
		{
			timer.GetElapsed();
			story.Begin();
			bRun = true;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	업데이트 루프 중지
		public void Stop()
		{
			story.Stop();
			bRun = false;
		}

		//===============================================================================================================================================
		//	전용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	UpdatePeriod 값을 Duration 타입으로 얻는다.
		Duration GetUpdateDuration()
		{
			return new Duration(TimeSpan.FromTicks((long)(updatePeriod * TimeSpan.TicksPerSecond)));
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	StoryBoard 완료
		void story_Completed(object sender, EventArgs e)
		{
			float delta = timer.GetElapsed();
			if( Update != null ) { Update(delta); }

			if( bRun ) { story.Begin(); }
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	UpdatePump
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	CompositionTarget.Rendering 을 이용한 업데이트 루프
	public class UpdatePump
	{
		//===============================================================================================================================================
		//	이벤트
		public delegate void UpdateHandler(float delta);
		public event UpdateHandler Update;

		//===============================================================================================================================================
		//	필드
		Timer timer;

		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public UpdatePump()
		{
			timer = new Timer();
		}

		//===============================================================================================================================================
		//	공용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	업데이트 루프 시작
		public void Begin()
		{
			CompositionTarget.Rendering += CompositionTarget_Rendering;
			timer.GetElapsed();
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	업데이트 루프 중지
		public void Stop()
		{
			CompositionTarget.Rendering -= CompositionTarget_Rendering;
		}

		//===============================================================================================================================================
		//	전용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	렌더링 직전에 호출된다.
		void CompositionTarget_Rendering(object sender, EventArgs e)
		{
			float delta = timer.GetElapsed();
			if( Update != null ) { Update(delta); }
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	DoubleClick
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	커멘트:
	//	MouseButtonDown 이벤트를 받기 위해서는 OnMouseButtonDown() 을 오버라이드 하거나 MouseLeftButtonDown 이벤트를 구독하는 2가지 방법이 있다.
	//	일단 이벤트를 구독하는 방법으로 구현해 보자.
	//	 - 오버라이드 방식의 문제
	//	DoubleClick 을 사용하는 클래스도 OnMouseButtonDown() 을 오버라이드 하는 경우 살짝 귀찮게 된다.
	//	base.OnMouseButtonDown() 의 호출여부를 결정할 수 있기 때문에 일반클릭과 더블클릭이기 모두 발생하는 일을 막을 수 있다.
	//	 - 이벤트 구독 방식의 문제
	//	이벤트 구독하는 순서에 따라 다른 녀석이 먼저 채갈수도 있다.
	//	일반 클릭이벤트가 발생하는 것을 막을 수 없다. Handled 값을 사용하는 방법밖에 없는데 그다지 확실한 방법은 못된다.
	//	이벤트의 설정된 델리게이트를 해제하기가 불편할 수 있다.
	//	----사용법----
	/*
	class MyUserControl
	{
		#region DoubleClick
		public event MouseButtonEventHandler DoubleClicked
		{
			add { doubleClick.Event += value; }
			remove { doubleClick.Event -= value; }
		}
		DoubleClick doubleClick;
		#endregion
	
		MyUserControl()
		{
			doubleClick = new DoubleClick(this);
		}	
	}
	*/
	public class DoubleClick
	{
		//===============================================================================================================================================
		//	프로퍼티
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public float Interval { get; set; }
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public event MouseButtonEventHandler Event;
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public UIElement OverridedSender { get; set; }

		//===============================================================================================================================================
		//	필드
		const float CLICK_INTERVAL = 0.25f;
		Timer timer;
		object lastSender;
		
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	생성자
		public DoubleClick()
		{
			Interval = CLICK_INTERVAL;
			timer = new Timer();
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		public DoubleClick(UIElement elem) : this()
		{
			OverridedSender = elem;
			AddListener(elem);
		}

		//===============================================================================================================================================
		//	공용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	마우스 클릭을 감지할 수 있게 연결시킨다.
		public void AddListener(UIElement elem)
		{
			elem.MouseLeftButtonDown += elem_MouseLeftButtonDown;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	마우스 클릭 핸들러를 해제한다.
		public void RemoveListener(UIElement elem)
		{
			elem.MouseLeftButtonDown -= elem_MouseLeftButtonDown;
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	더블클릭이 있었던 것처럼 이벤트를 발생시킨다.
		public void FireEvent(object sender, MouseButtonEventArgs e)
		{
			if( sender == null ) { sender = OverridedSender; }
			if( Event != null ) { Event(sender, e); }
		}

		//===============================================================================================================================================
		//	전용
		//-----------------------------------------------------------------------------------------------------------------------------------------------
		//	마우스가 클릭되면
		void elem_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
		{
			//DoubleClick 이벤트가 지금 e.Handled 에 따라 라우팅 안되게 제대로 처리를 못하고 있어서 직접 검사해야 함.
			if( e.Handled ) { return; }
			if( timer.GetElapsed() < Interval &&
				lastSender == sender )
			{
				//odo: e.Handled 가 설정되면 델리게이트 호출을 그만두어야 한다.
				if( Event != null ) { Event(OverridedSender != null ? OverridedSender : sender, e); }
			}
			lastSender = sender;
		}
	}
}